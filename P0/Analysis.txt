Big O analysis of Project 0 by task.

Task0.py: O(1) as the size of the file makes no difference to the number of times it has to get accessed.

Task1.py: O(n) Every record has to be accessed twice.

Task2.py: O(n) Every record has to be accessed twice, then every key of the dictionary has to be accessed once to sum it and then the dict has to be operated on for the max function and then it has to be printed out.

Task3.py: O(n^2) Every record has to be accessed twice to get the numbers, then it has to be accessed again and looped through each item in the list of lists until the area code is complete. This adds the square because that part of the algorythm is essentially O(n*4n).

Task4.py: O(n) Every record has to be accessed twice to get added to the sets. The set opeartions are probably at least O(n) which would make O(2n) but that still leaves me with O(n)